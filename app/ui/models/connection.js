(function() {
  var EVENT_STATE, STATE, TIME_ALL, TIME_SOME, checkEventState, checkTimer, exp, info, later, merge, ref, tryparse, wrapAction;

  ({tryparse, later} = require('../util'));

  STATE = {
    CONNECTING: 'connecting', // exactly match corresponding event name
    CONNECTED: 'connected', // exactly match corresponding event name
    CONNECT_FAILED: 'connect_failed' // exactly match corresponding event name
  };

  EVENT_STATE = {
    IN_SYNC: 'in_sync', // when we certain we have connection/events
    MISSING_SOME: 'missing_some', // when more than 40 secs without any event
    MISSING_ALL: 'missing_all' // when more than 10 minutes without any event
  };

  TIME_SOME = 40 * 1000; // 40 secs

  TIME_ALL = 10 * 60 * 1000; // 10 mins

  merge = function(t, ...os) {
    var i, k, len, o, v;
    for (i = 0, len = os.length; i < len; i++) {
      o = os[i];
      for (k in o) {
        v = o[k];
        if (v !== null && v !== (void 0)) {
          t[k] = v;
        }
      }
    }
    return t;
  };

  info = {
    connecting: 'Connectingâ€¦',
    connected: 'Connected',
    connect_failed: 'Not connected',
    unknown: 'Unknown'
  };

  module.exports = exp = {
    state: null, // current connection state
    eventState: null, // current event state
    lastActive: (ref = tryparse(localStorage.lastActive)) != null ? ref : 0, // last activity timestamp
    wasConnected: false,
    setState: function(state) {
      if (this.state === state) {
        return;
      }
      this.state = state;
      if (this.wasConnected && state === STATE.CONNECTED) {
        later(function() {
          return action('syncrecentconversations');
        });
      }
      this.wasConnected = this.wasConnected || state === STATE.CONNECTED;
      return updated('connection');
    },
    setWindowOnline: function(wonline) {
      if (this.wonline === wonline) {
        return;
      }
      this.wonline = wonline;
      if (!this.wonline) {
        return this.setState(STATE.CONNECT_FAILED);
      }
    },
    infoText: function() {
      var ref1;
      return (ref1 = info[this.state]) != null ? ref1 : info.unknown;
    },
    setLastActive: function(active) {
      if (this.lastActive === active) {
        return;
      }
      return this.lastActive = localStorage.lastActive = active;
    },
    setEventState: function(state) {
      if (this.eventState === state) {
        return;
      }
      this.eventState = state;
      if (state === EVENT_STATE.IN_SYNC) {
        if (!this.lastActive) {
          this.setLastActive(Date.now());
        }
      } else if (state === EVENT_STATE.MISSING_SOME) {
        // if we have a gap of more than 40 seconds we try getting
        // any events we may have missed during that gap. notice
        // that we get 'noop' every 20-30 seconds, so there is no
        // reason for a gap of 40 seconds.
        later(function() {
          return action('syncallnewevents', this.lastActive);
        });
      } else if (state === EVENT_STATE.MISSING_ALL) {
        // if we have a gap of more than 10 minutes, we will
        // reinitialize all convs using syncrecentconversations
        // (sort of like client startup)
        later(function() {
          return action('syncrecentconversations');
        });
      }
      later(function() {
        return checkEventState();
      });
      return updated('connection');
    }
  };

  merge(exp, STATE);

  merge(exp, EVENT_STATE);

  // averissimo: not sure when checkEventState is actually called
  //  I believe this is deprecated code, or it would be better to extend the timer
  //  to 30s or so
  checkTimer = null;

  checkEventState = function() {
    var elapsed;
    elapsed = Date.now() - exp.lastActive;
    if (checkTimer) {
      clearTimeout(checkTimer);
    }
    if (elapsed >= TIME_ALL) {
      wrapAction(function() {
        return exp.setEventState(EVENT_STATE.MISSING_ALL);
      });
    } else if (elapsed >= TIME_SOME) {
      wrapAction(function() {
        return exp.setEventState(EVENT_STATE.MISSING_SOME);
      });
    } else {
      wrapAction(function() {
        return exp.setEventState(EVENT_STATE.IN_SYNC);
      });
    }
    return checkTimer = setTimeout(checkEventState, 1000);
  };

  wrapAction = function(f) {
    handle('connwrap', function() {
      return f();
    });
    return action('connwrap');
  };

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
